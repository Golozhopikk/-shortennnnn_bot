from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from transformers import pipeline

# –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
weak_summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
strong_summarizer = pipeline("summarization", model="sshleifer/distilbart-cnn-12-6")

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É —Å–∂–∞—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤—É—Ö —É—Ä–æ–≤–Ω—è—Ö:\n"
        "1. –°–∏–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ (–æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n"
        "2. –°–ª–∞–±–æ–µ —Å–∂–∞—Ç–∏–µ (–∫—Ä–∞—Ç–∫–∏–π –∞–±–∑–∞—Ü)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è."
    )

async def handle_text(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    context.user_data['text'] = text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–∂–∞—Ç–∏—è
    keyboard = [
        [
            InlineKeyboardButton("–°–∏–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ", callback_data='strong'),
            InlineKeyboardButton("–°–ª–∞–±–æ–µ —Å–∂–∞—Ç–∏–µ", callback_data='weak'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è:', reply_markup=reply_markup)

async def summarize(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    compression_level = query.data
    text = context.user_data.get('text')

    if not text:
        await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞.")
        return

    if compression_level == 'strong':
        summary = strong_summarizer(text, max_length=45, min_length=15, do_sample=False)
    else:
        summary = weak_summarizer(text, max_length=100, min_length=50, do_sample=False)

    summarized_text = summary[0]['summary_text']
    await query.edit_message_text(text=f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{summarized_text}")

def main() -> None:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ApplicationBuilder –≤–º–µ—Å—Ç–æ Updater
    application = ApplicationBuilder().token("7705332084:AAEne2FzfkpGeaak3DNXY4fnUgSm_5ogDd0").build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(summarize))

    application.run_polling()

if __name__ == '__main__':
    main()